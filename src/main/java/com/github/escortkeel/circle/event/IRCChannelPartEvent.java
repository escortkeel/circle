/*
 * Copyright (c) 2013, Keeley Hoek (escortkeel@live.com)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package com.github.escortkeel.circle.event;

import com.github.escortkeel.circle.IRCClient;

/**
 * This class represents an IRC channel join/part event, generated by an
 * <code>IRCClient</code> instance when a channel is joined/parted.
 *
 * @author Keeley Hoek (escortkeel@live.com)
 */
public class IRCChannelPartEvent extends IRCEvent {

    private final String channel;
    private final boolean kicked;

    /**
     * Constructs a new
     * <code>IRCChannelPartEvent</code> with the specified parameters.
     */
    public IRCChannelPartEvent(IRCClient client, String channel, boolean kicked) {
        super(client);

        this.channel = channel;
        this.kicked = kicked;
    }

    /**
     * Returns the channel which is associated with this event.
     *
     * @return the channel.
     */
    public String getChannel() {
        return channel;
    }

    /**
     * Returns whether the channel was left as the result of a kick.
     *
     * @return whether the channel was left as the result of a kick.
     */
    public boolean wasKicked() {
        return kicked;
    }
}
